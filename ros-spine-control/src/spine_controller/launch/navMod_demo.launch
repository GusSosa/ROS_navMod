<launch>

  <!-- visualization node to show the real turtle, the measurements and the estimated position -->
  <!--node pkg="turtlesim" type="turtlesim_node" name="turtlesim" /-->
  <!-- keyboard control for the real turtle -->
  <!--node pkg="turtlesim" type="turtle_teleop_key" name="teleop" output="screen">
        <param name="scale_linear" value="0.1" type="double"/>
        <param name="scale_angular" value=".3" type="double"/>
    </node--> 
  <!--node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop" output="screen">
        <param name="scale_linear" value="0.1" type="double"/>
        <param name="scale_angular" value=".3" type="double"/>
        <remap from="/cmd_vel" to="/turtle1/cmd_vel"/>
    </node--> 
  <!-- open port to echoing the serial port /dev/ttyACM0 intput-->
  <node pkg="spine_controller" type="serial_rx_echo.py" name="serial_rx_echo"
    args="/dev/ttyACM0" output="screen"/>
<!-- publisher to invkin_tx_commands serial output-->
  <node pkg="spine_controller" type="invkin_publisher.py" name="invkin_publisher"
    args="invkin_tx_commands" output="screen"/>
  <!-- publisher from invkin_tx_commands to /dev/ttyACM0 -->
  <node pkg="spine_controller" type="serial_tx_fromtopic.py" name="serial_tx_fromtopic"
    args="/dev/ttyACM0 invkin_tx_commands" output="screen"/>

  <!-- 'turtle positioning system', transforming the position of the real turtle to a noisy measurement at a given frequency -->
  <!--node pkg="robot_localization_demo" type="positioning_system_node" name="turtle1_positioning_system_node"
        args="-f 1. -x 0.2 -y 0.2 -t 0.2 -v" output="screen" /-->
  <!-- 'turtle odometry node', transforming the movements of the real turtle to a noisy measurement at a given frequency -->
  <!--node pkg="robot_localization_demo" type="odometry_node" name="turtle1_odometry_node"
        args="-f 100. -x 0. -X 0. -t 0. -T 0. -v" output="screen" /-->
  <!-- 'turtle imu node', transforming the movements of the real turtle to a noisy measurement at a given frequency -->
  <!--node pkg="robot_localization_demo" type="imu_data_node" name="turtle1_imu_data_node"
        args="-f 100. -x 0. -y 0. -t 0. -v" output="screen" /-->

  <!-- robot_localization EKF node for the odom frame -->
  <!--node pkg="robot_localization" type="ekf_localization_node" name="robot_localization_ekf_node_odom" clear_params="true">
    <param name="frequency" value="10." />  
    <param name="sensor_timeout" value="0.2" />  
    <param name="two_d_mode" value="true" />
    <param name="publish_tf" value="true" />
    <param name="map_frame" value="map" />
    <param name="odom_frame" value="odom" />
    <param name="base_link_frame" value="base_link" />
    <param name="world_frame" value="odom" />
    <param name="print_diagnostics" value="true" />
    <remap from="odometry/filtered" to="odometry/filtered_twist" />
    <param name="twist0" value="turtle1/sensors/twist" />
    <param name="twist0_differential" value="false"/>
    <rosparam param="twist0_config">[false, false, false, false, false, false,
                                     true, true, false, false, false, true,
                                     false, false, false]</rosparam>
  </node-->

  <!-- robot_localization EKF node for the map frame -->
  <!--node pkg="robot_localization" type="ekf_localization_node" name="robot_localization_ekf_node_map"  clear_params="true">
    <param name="frequency" value="10" />  
    <param name="sensor_timeout" value="0.2" />  
    <param name="two_d_mode" value="true" />
    <param name="publish_tf" value="true" />
    <param name="map_frame" value="map" />
    <param name="odom_frame" value="odom" />
    <param name="base_link_frame" value="base_link" />
    <param name="world_frame" value="map" />
    <param name="twist0" value="turtle1/sensors/twist" />
    <rosparam param="twist0_config">[false, false, false, false, false, false,
                                     true, true, false, false, false, true,
                                     false, false, false]</rosparam>
    <param name="imu0" value="turtle1/imu_data" />
    <rosparam param="imu0_config">[false, false, false, false, false, true,
                                    true, true, false, false, false, true,
                                    false, false, false]</rosparam>
    <remap from="odometry/filtered" to="odometry/filtered_map"/>
  </node-->

  <!-- transformation visualization node, visualizing the estimated position of the turtle in the map frame -->
  <!--node pkg="robot_localization_demo" type="transformation_visualization_node" name="transformation_visualization_node" /-->
  

</launch> 